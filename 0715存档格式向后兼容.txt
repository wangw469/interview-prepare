问题：道具在数据库中的存档如何做到更好的兼容？
旧版本的角色存档是用旧版本程序生成的，希望可以在新版本程序中可以被兼容，这属于向后兼容问题。
下面需要探讨的就是，如何达到向后兼容。

注解：
1. 向后兼容：用旧版本程序生成的文件，在新版中仍然可以使用。
2. 向前兼容：用新版本程序生成的文件，可以在旧版本中使用。

向下兼容
向下兼容(downward compatibility),又称向后兼容(backward compatibility)、回 溯相容,在计算机中指在一个程序和/或库更新到较新版本后,用旧版本程序创建的文 档或系统仍能被正常操作或使用(包括写入),或在旧版本库的基础上开发的程序仍 能正常编译运行的情况。
在文件系统中,ext4文件系统的设计就是向后兼容的,ext3的文件系统可以被当作 ext4文件系统挂载。
通常更新一个软件时,应该为向下兼容性做出一定的考虑,这往往能给用户带来方便 并更好地留住用户。Microsoft 特別強調維持軟件的向下兼容性。為了實現此一目標,有時微軟甚至不惜支持使用了非官方乃至误用的 API 的軟件[1]。 但情况并不总是这样,有时为了考虑向下兼容会带来一些累赘,尤其是进行过较多升级后。Python 3.0 便是放弃向下兼容的一个例子[2][3]。
如果一个软件的旧的版本保存的文档不能被新版本读取,即使厂商提供了额外工具对旧文档进行不可逆转的转换,这也不能称作向下兼容。这可能是软件厂商的一种市场战略,强迫用户购买升级软件,随着升级用户逐渐增加,逐渐地使得旧软件能读取的文档越来越少。
